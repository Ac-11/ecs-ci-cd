name: CI/CD Pipeline for Node.js App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Build, tag, and push Docker image to ECR
      - name: Build, tag, and push Docker image
        run: |
          IMAGE_URI=651706780098.dkr.ecr.us-east-1.amazonaws.com/nodejs-app:${{ github.sha }}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image=$IMAGE_URI" >> $GITHUB_ENV  # Set image URI as an environment variable

      # Step 5: Get current task definition from ECS
      - name: Get current task definition
        run: |
          aws ecs describe-task-definition --task-definition nodejs-task-def > task-definition.json

      # Step 6: Update ECS task definition with the new image URI
      - name: Fill in the new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: nodejs-container
          image: ${{ env.image }}  # Use the image URI from the previous step

      # Step 7: Deploy to ECS using CodeDeploy
      - name: Deploy to ECS using CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name AppECS-Node-js-nodejs-bg \
            --deployment-group-name DgpECS-Node-js-nodejs-bg \
            --revision file://appspec.yml \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --description "Deploy new image to ECS" \
            --task-definition ${{ steps.task-def.outputs.task-definition }}
